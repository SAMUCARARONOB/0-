local tweenService = game:GetService("TweenService")
local gui = Instance.new("ScreenGui")
gui.Parent = game.Players.LocalPlayer.PlayerGui
gui.ResetOnSpawn = false

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 0, 0, 0)
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.Position = UDim2.new(0.5, 0, 0.5, 0)
frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
frame.BackgroundTransparency = 0.1
frame.BorderSizePixel = 0
frame.Parent = gui

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0.1, 0)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
title.BorderSizePixel = 0
title.Text = "PAINEL"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Font = Enum.Font.GothamBold
title.TextSize = 30
title.Parent = frame

local scrollingFrame = Instance.new("ScrollingFrame")
scrollingFrame.Size = UDim2.new(0.95, 0, 0.85, 0)
scrollingFrame.Position = UDim2.new(0.025, 0, 0.12, 0)
scrollingFrame.CanvasSize = UDim2.new(0, 0, 1, 0)
scrollingFrame.ScrollBarThickness = 10
scrollingFrame.BackgroundColor3 = Color3.fromRGB(17, 17, 17)
scrollingFrame.BorderSizePixel = 0
scrollingFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
scrollingFrame.Parent = frame

local layout = Instance.new("UIGridLayout")
layout.CellPadding = UDim2.new(0.02, 0, 0.06, 0) -- Adicionado espaçamento vertical extra
layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
layout.VerticalAlignment = Enum.VerticalAlignment.Top
layout.Parent = scrollingFrame

local hideButton = Instance.new("ImageButton")
hideButton.Size = UDim2.new(0.05, 0, 0.05, 0)
hideButton.Position = UDim2.new(0.95, -10, 0, 10)
hideButton.Image = "rbxassetid://6035047409"
hideButton.BackgroundTransparency = 1
hideButton.Parent = frame

local ballButton = Instance.new("ImageButton")
ballButton.Size = UDim2.new(0.05, 0, 0.1, 0)
ballButton.AnchorPoint = Vector2.new(0.5, 0.5)
ballButton.Position = UDim2.new(0.1, 0, 0.9, 0)
ballButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ballButton.Image = "rbxassetid://6337069410"
ballButton.BackgroundTransparency = 0
ballButton.Visible = false
ballButton.Active = true
ballButton.Draggable = true
ballButton.Parent = gui

local ballCorner = Instance.new("UICorner")
ballCorner.CornerRadius = UDim.new(0.5, 0)
ballCorner.Parent = ballButton

local buttons = {}
local toggles = {}

local function animateFrameIn()
    frame.Visible = true
    local tweenIn = tweenService:Create(
        frame,
        TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
        {Size = UDim2.new(0.8, 0, 1.1, 0)}
    )
    tweenIn:Play()
end

local function animateFrameOut()
    local tweenOut = tweenService:Create(
        frame,
        TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
        {Size = UDim2.new(0, 0, 0, 0)}
    )
    tweenOut:Play()
    tweenOut.Completed:Connect(function()
        frame.Visible = false
        ballButton.Visible = true
    end)
end

hideButton.MouseButton1Click:Connect(function()
    animateFrameOut()
end)

ballButton.MouseButton1Click:Connect(function()
    ballButton.Visible = false
    animateFrameIn()
end)

animateFrameIn()

local function adjustColumns(columnCount)
    if columnCount < 1 then return end
    layout.CellSize = UDim2.new(1 / columnCount - 0.02, 0, 0.12, 0)
end

local function createButton(index, buttonFunction)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0.2, 0, 0.1, 0)
    button.Text = "Botão " .. index
    button.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Font = Enum.Font.Gotham
    button.TextSize = 18
    button.TextWrapped = true
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = button
    button.MouseButton1Click:Connect(function()
        local success, err = pcall(function()
            loadstring(buttonFunction)()
        end)
        if not success then
            warn("Erro ao executar a função do botão " .. index .. ": " .. err)
        end
    end)
    button.Parent = scrollingFrame
    buttons["A" .. index] = button
end

local function createToggle(index, activeFunction)
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0.2, 0, 0.1, 0)
    toggleButton.Text = "Toggle " .. index
    toggleButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.TextSize = 14
    toggleButton.TextWrapped = true
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = toggleButton
    local icon = Instance.new("ImageButton")
    icon.Size = UDim2.new(0.1, 0, 0.8, 0)
    icon.Position = UDim2.new(0.90, 0, 0.1, 0)
    icon.BackgroundTransparency = 1
    icon.Image = "rbxassetid://14293471713"
    icon.ImageColor3 = Color3.fromRGB(255, 0, 0)
    icon.Parent = toggleButton
    local isActive = false
    icon.MouseButton1Click:Connect(function()
        isActive = not isActive
        toggleButton.BackgroundColor3 = isActive and Color3.fromRGB(0, 128, 0) or Color3.fromRGB(0, 0, 0)
        icon.ImageColor3 = isActive and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
        if isActive and activeFunction then
            local success, err = pcall(function()
                loadstring(activeFunction)()
            end)
            if not success then
                warn("Erro ao executar função do toggle " .. index .. ": " .. err)
            end
        end
    end)
    toggleButton.Parent = scrollingFrame
    toggles["T" .. index] = toggleButton
end

local function addLabelAbove(index, labelText, isToggle)
    local buttonOrToggle = isToggle and toggles["T" .. index] or buttons["A" .. index]
    if buttonOrToggle then
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, 0, 0.3, 0)
        label.Position = UDim2.new(0, 0, -0.4, 0)
        label.BackgroundTransparency = 1
        label.Text = labelText
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.Font = Enum.Font.Gotham
        label.TextSize = 14
        label.TextWrapped = true
        label.Parent = buttonOrToggle
        scrollingFrame.CanvasSize = UDim2.new(0, 0, scrollingFrame.CanvasSize.Y.Offset + label.Size.Y.Offset, 0)
    else
        warn("O botão ou toggle com índice " .. index .. " não existe.")
    end
end

local function addLabelAboveButton(index, labelText)
    local button = buttons["A" .. index]
    if button then
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, 0, 0.3, 0)
        label.Position = UDim2.new(0, 0, -0.4, 0)
        label.BackgroundTransparency = 1
        label.Text = labelText
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.Font = Enum.Font.Gotham
        label.TextSize = 14
        label.TextWrapped = true
        label.Parent = button
        scrollingFrame.CanvasSize = UDim2.new(0, 0, scrollingFrame.CanvasSize.Y.Offset + label.Size.Y.Offset, 0)
    else
        warn("O botão com índice " .. index .. " não existe.")
    end
end

local function processCommands(command)
    if command:match("^CL%d+") then
        local columnCount = tonumber(command:match("^CL(%d+)"))
        adjustColumns(columnCount)
    elseif command:match("^A%d+>%[.+%]") then
        local buttonIndex = tonumber(command:match("^A(%d+)>"))
        local buttonFunction = command:match("%[(.+)%]")
        createButton(buttonIndex, buttonFunction)
    elseif command:match("^T%d+>%[.+%]") then
        local toggleIndex = tonumber(command:match("^T(%d+)>"))
        local toggleFunction = command:match("%[(.+)%]")
        createToggle(toggleIndex, toggleFunction)
    elseif command:match("^A%d+N%(.+%)") then
        local buttonIndex = tonumber(command:match("^A(%d+)N"))
        local newName = command:match("%((.+)%)")
        if buttons["A" .. buttonIndex] then
            buttons["A" .. buttonIndex].Text = newName
        end
    elseif command:match("^T%d+N%(.+%)") then
        local toggleIndex = tonumber(command:match("^T(%d+)N"))
        local newName = command:match("%((.+)%)")
        if toggles["T" .. toggleIndex] then
            toggles["T" .. toggleIndex].Text = newName
        end
    elseif command:match("^LBT%d+>%(.+%)") then
        local targetIndex = tonumber(command:match("^LBT(%d+)>"))
        local labelText = command:match("%((.+)%)")
        local isToggle = toggles["T" .. targetIndex] ~= nil
        addLabelAbove(targetIndex, labelText, isToggle)
    elseif command:match("^LBA%d+>%(.+%)") then
    local targetIndex = tonumber(command:match("^LBA(%d+)>"))
    local labelText = command:match("%((.+)%)")
    addLabelAboveButton(targetIndex, labelText)
    elseif command:match("^A0") then
        frame.Active = true
        frame.Draggable = true
    elseif command:match("^C1=") then
        local newTitle = command:match("=(.+)")
        title.Text = newTitle or "PAINEL"
    elseif command:match("^C2=") then
        local colorValues = command:match("=(.+)")
        if colorValues then
            local r, g, b = colorValues:match("(%d+),(%d+),(%d+)")
            title.TextColor3 = Color3.fromRGB(tonumber(r), tonumber(g), tonumber(b))
        end
    elseif command:match("^C4%(%w*%)") then
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 10)
        corner.Parent = frame
    end
end

local commandBindable = Instance.new("BindableEvent")
commandBindable.Name = "CommandBindable"
commandBindable.Parent = game.ReplicatedStorage

commandBindable.Event:Connect(processCommands)

print("Interface inicializada com suporte a animações, comandos atualizados e TextLabels ajustáveis.") 
