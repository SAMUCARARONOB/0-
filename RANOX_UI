local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local RANOX = {}

function RANOX:CreateWindow(config)
    local Window = {}
    config = config or {}
    
    -- Criação da interface principal
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "RANOX_ULTRA"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.Parent = game:GetService("CoreGui")
    
    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 500, 0, 350)
    mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    mainFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
    mainFrame.BackgroundTransparency = 0.05
    mainFrame.Parent = screenGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = mainFrame
    
    local stroke = Instance.new("UIStroke")
    stroke.Thickness = 1
    stroke.Color = Color3.fromRGB(150, 20, 20)
    stroke.Transparency = 0.2
    stroke.Parent = mainFrame

    -- Header
    local header = Instance.new("Frame")
    header.Size = UDim2.new(1, 0, 0, 30)
    header.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    header.BorderSizePixel = 0
    header.Parent = mainFrame
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(0.7, 0, 1, 0)
    title.Text = config.Title or "RANOX ULTRA"
    title.TextColor3 = Color3.fromRGB(220, 220, 220)
    title.Font = Enum.Font.GothamBold
    title.TextSize = 16
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.BackgroundTransparency = 1
    title.Position = UDim2.new(0, 15, 0, 0)
    title.Parent = header

    -- Botão de fechar
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -30, 0, 0)
    closeButton.Text = "X"
    closeButton.TextColor3 = Color3.fromRGB(220, 220, 220)
    closeButton.Font = Enum.Font.GothamBold
    closeButton.TextSize = 16
    closeButton.BackgroundTransparency = 1
    closeButton.Parent = header
    
    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)
    
    closeButton.MouseEnter:Connect(function()
        closeButton.TextColor3 = Color3.fromRGB(255, 50, 50)
    end)
    
    closeButton.MouseLeave:Connect(function()
        closeButton.TextColor3 = Color3.fromRGB(220, 220, 220)
    end)

    -- Sistema de abas
    local tabContainer = Instance.new("Frame")
    tabContainer.Size = UDim2.new(1, -20, 0, 30)
    tabContainer.Position = UDim2.new(0, 10, 0, 40)
    tabContainer.BackgroundTransparency = 1
    tabContainer.Parent = mainFrame
    
    local tabContent = Instance.new("Frame")
    tabContent.Size = UDim2.new(1, -20, 1, -80)
    tabContent.Position = UDim2.new(0, 10, 0, 80)
    tabContent.BackgroundTransparency = 1
    tabContent.ClipsDescendants = true
    tabContent.Parent = mainFrame
    
    local tabs = {}
    local currentTab = nil

    function Window:CreateTab(name)
        local tabButton = Instance.new("TextButton")
        tabButton.Size = UDim2.new(0, 100, 1, 0)
        tabButton.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
        tabButton.Text = name
        tabButton.TextColor3 = Color3.fromRGB(180, 180, 180)
        tabButton.Font = Enum.Font.Gotham
        tabButton.TextSize = 13
        tabButton.AutoButtonColor = false
        tabButton.Parent = tabContainer
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 6)
        corner.Parent = tabButton
        
        local tabFrame = Instance.new("ScrollingFrame")
        tabFrame.Size = UDim2.new(1, 0, 1, 0)
        tabFrame.BackgroundTransparency = 1
        tabFrame.Visible = false
        tabFrame.ScrollBarThickness = 5
        tabFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
        tabFrame.ScrollingDirection = Enum.ScrollingDirection.Y
        tabFrame.Parent = tabContent
        
        local layout = Instance.new("UIListLayout")
        layout.Padding = UDim.new(0, 10)
        layout.Parent = tabFrame
        
        tabs[name] = {
            button = tabButton,
            frame = tabFrame
        }
        
        tabButton.MouseButton1Click:Connect(function()
            if currentTab then
                currentTab.button.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
                currentTab.button.TextColor3 = Color3.fromRGB(180, 180, 180)
                currentTab.frame.Visible = false
            end
            
            tabButton.BackgroundColor3 = Color3.fromRGB(150, 20, 20)
            tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            tabFrame.Visible = true
            currentTab = tabs[name]
        end)
        
        if not currentTab then
            tabButton.BackgroundColor3 = Color3.fromRGB(150, 20, 20)
            tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            tabFrame.Visible = true
            currentTab = tabs[name]
        end
        
        return tabFrame
    end

    -- Toggle com animação e efeitos
    function Window:CreateToggle(tab, config)
        config = config or {}
        local container = Instance.new("Frame")
        container.Size = UDim2.new(1, 0, 0, 40)
        container.BackgroundTransparency = 1
        container.Parent = tab
        
        local toggleFrame = Instance.new("Frame")
        toggleFrame.Size = UDim2.new(1, 0, 0, 30)
        toggleFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
        toggleFrame.Parent = container
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 6)
        corner.Parent = toggleFrame
        
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(0.8, 0, 1, 0)
        label.Text = config.Text or "Toggle"
        label.TextColor3 = Color3.fromRGB(220, 220, 220)
        label.Font = Enum.Font.Gotham
        label.TextSize = 14
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.BackgroundTransparency = 1
        label.Position = UDim2.new(0, 15, 0, 0)
        label.Parent = toggleFrame
        
        local toggle = Instance.new("Frame")
        toggle.Size = UDim2.new(0, 50, 0, 24)
        toggle.Position = UDim2.new(1, -60, 0.5, -12)
        toggle.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
        toggle.Parent = toggleFrame
        
        local toggleCorner = Instance.new("UICorner")
        toggleCorner.CornerRadius = UDim.new(1, 0)
        toggleCorner.Parent = toggle
        
        local indicator = Instance.new("Frame")
        indicator.Size = UDim2.new(0, 20, 0, 20)
        indicator.Position = UDim2.new(0, 2, 0.5, -10)
        indicator.BackgroundColor3 = Color3.fromRGB(120, 120, 120)
        indicator.Parent = toggle
        
        local indicatorCorner = Instance.new("UICorner")
        indicatorCorner.CornerRadius = UDim.new(1, 0)
        indicatorCorner.Parent = indicator
        
        local state = config.Default or false
        local function updateToggle()
            state = not state
            local goalColor = state and Color3.fromRGB(150, 20, 20) or Color3.fromRGB(40, 40, 45)
            local goalPos = state and UDim2.new(1, -22, 0.5, -10) or UDim2.new(0, 2, 0.5, -10)
            
            TweenService:Create(toggle, TweenInfo.new(0.2), {BackgroundColor3 = goalColor}):Play()
            TweenService:Create(indicator, TweenInfo.new(0.2), {
                Position = goalPos,
                BackgroundColor3 = state and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(120, 120, 120)
            }):Play()
            
            if config.Callback then
                config.Callback(state)
            end
        end
        
        -- Inicializar estado
        if state then
            toggle.BackgroundColor3 = Color3.fromRGB(150, 20, 20)
            indicator.Position = UDim2.new(1, -22, 0.5, -10)
            indicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        end
        
        toggle.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                updateToggle()
            end
        end)
        
        if config.Description then
            local desc = Instance.new("TextLabel")
            desc.Size = UDim2.new(1, -10, 0, 20)
            desc.Position = UDim2.new(0, 5, 0, 35)
            desc.Text = config.Description
            desc.TextColor3 = Color3.fromRGB(150, 150, 150)
            desc.Font = Enum.Font.Gotham
            desc.TextSize = 12
            desc.TextXAlignment = Enum.TextXAlignment.Left
            desc.BackgroundTransparency = 1
            desc.Parent = container
        end
        
        return {
            SetState = function(newState)
                if state ~= newState then
                    updateToggle()
                end
            end
        }
    end

    -- Slider com arrasto suave
    function Window:CreateSlider(tab, config)
        config = config or {}
        local container = Instance.new("Frame")
        container.Size = UDim2.new(1, 0, 0, 60)
        container.BackgroundTransparency = 1
        container.Parent = tab
        
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, 0, 0, 20)
        label.Text = config.Text or "Slider"
        label.TextColor3 = Color3.fromRGB(220, 220, 220)
        label.Font = Enum.Font.Gotham
        label.TextSize = 14
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.BackgroundTransparency = 1
        label.Parent = container
        
        local sliderTrack = Instance.new("Frame")
        sliderTrack.Size = UDim2.new(1, 0, 0, 6)
        sliderTrack.Position = UDim2.new(0, 0, 0, 30)
        sliderTrack.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
        sliderTrack.Parent = container
        
        local trackCorner = Instance.new("UICorner")
        trackCorner.CornerRadius = UDim.new(1, 0)
        trackCorner.Parent = sliderTrack
        
        local sliderFill = Instance.new("Frame")
        sliderFill.Size = UDim2.new(0.5, 0, 1, 0)
        sliderFill.BackgroundColor3 = Color3.fromRGB(150, 20, 20)
        sliderFill.BorderSizePixel = 0
        sliderFill.Parent = sliderTrack
        
        local fillCorner = Instance.new("UICorner")
        fillCorner.CornerRadius = UDim.new(1, 0)
        fillCorner.Parent = sliderFill
        
        local sliderButton = Instance.new("TextButton")
        sliderButton.Size = UDim2.new(0, 20, 0, 20)
        sliderButton.Position = UDim2.new(0.5, -10, 0.5, -10)
        sliderButton.BackgroundColor3 = Color3.fromRGB(240, 240, 240)
        sliderButton.Text = ""
        sliderButton.AutoButtonColor = false
        sliderButton.ZIndex = 2
        sliderButton.Parent = sliderTrack
        
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(1, 0)
        buttonCorner.Parent = sliderButton
        
        local valueLabel = Instance.new("TextLabel")
        valueLabel.Size = UDim2.new(0, 60, 0, 20)
        valueLabel.Position = UDim2.new(1, -60, 0, 0)
        valueLabel.Text = tostring(config.Default or 50)
        valueLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
        valueLabel.Font = Enum.Font.GothamBold
        valueLabel.TextSize = 14
        valueLabel.BackgroundTransparency = 1
        valueLabel.Parent = container
        
        local min = config.Min or 0
        local max = config.Max or 100
        local value = config.Default or 50
        
        local function updateValue(newValue)
            value = math.clamp(newValue, min, max)
            local percent = (value - min) / (max - min)
            sliderFill.Size = UDim2.new(percent, 0, 1, 0)
            sliderButton.Position = UDim2.new(percent, -10, 0.5, -10)
            valueLabel.Text = tostring(math.floor(value))
            
            if config.Callback then
                config.Callback(value)
            end
        end
        
        local dragging = false
        local dragStart
        local startPos
        
        sliderButton.MouseButton1Down:Connect(function()
            dragging = true
            dragStart = UserInputService:GetMouseLocation().X
            startPos = sliderButton.Position.X.Scale
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local delta = (input.Position.X - dragStart) / sliderTrack.AbsoluteSize.X
                local newScale = math.clamp(startPos + delta, 0, 1)
                updateValue(min + (max - min) * newScale)
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        
        -- Inicializar
        updateValue(value)
        
        return {
            SetValue = function(newValue)
                updateValue(newValue)
            end
        }
    end

    -- Dropdown com animação
    function Window:CreateDropdown(tab, config)
        config = config or {}
        local container = Instance.new("Frame")
        container.Size = UDim2.new(1, 0, 0, 40)
        container.BackgroundTransparency = 1
        container.Parent = tab
        
        local dropdownButton = Instance.new("TextButton")
        dropdownButton.Size = UDim2.new(1, 0, 0, 30)
        dropdownButton.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
        dropdownButton.Text = config.Text or "Select option"
        dropdownButton.TextColor3 = Color3.fromRGB(180, 180, 180)
        dropdownButton.Font = Enum.Font.Gotham
        dropdownButton.TextSize = 14
        dropdownButton.TextXAlignment = Enum.TextXAlignment.Left
        dropdownButton.AutoButtonColor = false
        dropdownButton.Parent = container
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 6)
        corner.Parent = dropdownButton
        
        local arrow = Instance.new("ImageLabel")
        arrow.Size = UDim2.new(0, 16, 0, 16)
        arrow.Position = UDim2.new(1, -25, 0.5, -8)
        arrow.Image = "rbxassetid://6031090990" -- Seta para baixo
        arrow.BackgroundTransparency = 1
        arrow.Parent = dropdownButton
        
        local dropdownFrame = Instance.new("Frame")
        dropdownFrame.Size = UDim2.new(1, 0, 0, 0)
        dropdownFrame.Position = UDim2.new(0, 0, 0, 35)
        dropdownFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
        dropdownFrame.ClipsDescendants = true
        dropdownFrame.Parent = container
        
        local dropdownCorner = Instance.new("UICorner")
        dropdownCorner.CornerRadius = UDim.new(0, 6)
        dropdownCorner.Parent = dropdownFrame
        
        local optionsLayout = Instance.new("UIListLayout")
        optionsLayout.Padding = UDim.new(0, 2)
        optionsLayout.Parent = dropdownFrame
        
        local isOpen = false
        local selected = config.Default or config.Options[1]
        dropdownButton.Text = selected
        
        local function toggleDropdown()
            isOpen = not isOpen
            local targetSize = isOpen and (#config.Options * 30 + 4) or 0
            TweenService:Create(dropdownFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, targetSize)}:Play()
            arrow.Rotation = isOpen and 180 or 0
        end
        
        dropdownButton.MouseButton1Click:Connect(toggleDropdown)
        
        for i, option in ipairs(config.Options) do
            local optionButton = Instance.new("TextButton")
            optionButton.Size = UDim2.new(1, -10, 0, 28)
            optionButton.Position = UDim2.new(0, 5, 0, 5 + (i-1)*30)
            optionButton.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
            optionButton.Text = option
            optionButton.TextColor3 = Color3.fromRGB(180, 180, 180)
            optionButton.Font = Enum.Font.Gotham
            optionButton.TextSize = 13
            optionButton.AutoButtonColor = false
            optionButton.Parent = dropdownFrame
            
            local optionCorner = Instance.new("UICorner")
            optionCorner.CornerRadius = UDim.new(0, 4)
            optionCorner.Parent = optionButton
            
            optionButton.MouseButton1Click:Connect(function()
                selected = option
                dropdownButton.Text = option
                toggleDropdown()
                
                if config.Callback then
                    config.Callback(option)
                end
            end)
            
            optionButton.MouseEnter:Connect(function()
                TweenService:Create(optionButton, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(45, 45, 50)}):Play()
            end)
            
            optionButton.MouseLeave:Connect(function()
                TweenService:Create(optionButton, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(35, 35, 40)}):Play()
            end)
        end
        
        -- Fechar dropdown ao clicar fora
        local function closeDropdown()
            if isOpen then
                toggleDropdown()
            end
        end
        
        UserInputService.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 and isOpen then
                if not dropdownFrame:IsDescendantOf(container) then
                    closeDropdown()
                end
            end
        end)
        
        return {
            SetOption = function(option)
                if table.find(config.Options, option) then
                    selected = option
                    dropdownButton.Text = option
                    if config.Callback then config.Callback(option) end
                end
            end
        }
    end

    -- Funções adicionais
    function Window:SetVisible(visible)
        screenGui.Enabled = visible
    end

    function Window:Destroy()
        screenGui:Destroy()
    end

    return Window
end

return RANOX
