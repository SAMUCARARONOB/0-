local RNOX = {}

function RNOX:CreateMainUI(params)
    local gui = Instance.new("ScreenGui")
    gui.Parent = game.Players.LocalPlayer.PlayerGui
    gui.ResetOnSpawn = false

    local baseFrame = Instance.new("Frame")
    baseFrame.Size = UDim2.new(0, 300, 0, 350)
    baseFrame.Position = UDim2.new(0.5, -225, 0.5, -175)
    baseFrame.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    baseFrame.BorderSizePixel = 0
    baseFrame.Active = true
    baseFrame.Draggable = true
    baseFrame.Parent = gui

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0.1, 0)
    corner.Parent = baseFrame

    local header = Instance.new("TextLabel")
    header.Size = UDim2.new(1, -20, 0.25, 0)
    header.Position = UDim2.new(0, 10, 0, -5)
    header.BackgroundColor3 = params.TituloCor or Color3.fromRGB(0, 0, 0)
    header.BackgroundTransparency = 1
    header.Text = params.Titulo or "RNOX Interface"
    header.TextColor3 = params.TituloTextoCor or Color3.fromRGB(10, 255, 10)
    header.Font = Enum.Font.GothamBold
    header.TextSize = 25
    header.TextWrapped = true
    header.Parent = baseFrame

    local cornerHeader = Instance.new("UICorner")
    cornerHeader.CornerRadius = UDim.new(0.1, 0)
    cornerHeader.Parent = header

    local tabScrollFrame = Instance.new("ScrollingFrame")
    tabScrollFrame.Size = UDim2.new(1, 0, 0.1, 0)
    tabScrollFrame.Position = UDim2.new(0, 0, 0.17, 0)
    tabScrollFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    tabScrollFrame.ScrollBarThickness = 8
    tabScrollFrame.HorizontalScrollBarInset = Enum.ScrollBarInset.ScrollBar
    tabScrollFrame.VerticalScrollBarInset = Enum.ScrollBarInset.Always
    tabScrollFrame.Parent = baseFrame

    local cornerTabFrame = Instance.new("UICorner")
    cornerTabFrame.CornerRadius = UDim.new(0.1, 0)
    cornerTabFrame.Parent = tabScrollFrame

    local tabLayout = Instance.new("UIListLayout")
    tabLayout.FillDirection = Enum.FillDirection.Horizontal
    tabLayout.Padding = UDim.new(0.02, 0)
    tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabLayout.Parent = tabScrollFrame

tabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    tabScrollFrame.CanvasSize = UDim2.new(0, tabLayout.AbsoluteContentSize.X + 10, 0, 0)
end)

    local tabLayout = Instance.new("UIListLayout")
    tabLayout.FillDirection = Enum.FillDirection.Horizontal
    tabLayout.Padding = UDim.new(0.02, 0)
    tabLayout.Parent = tabScrollFrame

    self.gui = gui
    self.baseFrame = baseFrame
    self.header = header
    self.tabScrollFrame = tabScrollFrame
    self.tabs = {}
end

function RNOX:UpdateHeader(params)
    if params.Titulo then
        self.header.Text = params.Titulo
    end
    if params.TituloCor then
        self.header.BackgroundColor3 = params.TituloCor
    end
    if params.TituloTextoCor then
        self.header.TextColor3 = params.TituloTextoCor
    end
end

function RNOX:AddTab(params)
    local tabContent = Instance.new("ScrollingFrame")
    tabContent.Size = UDim2.new(1, 0, 0.65, 0)
    tabContent.Position = UDim2.new(0, 0, 0.25, 0)
    tabContent.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    tabContent.Visible = false
    tabContent.ScrollBarThickness = 10
    tabContent.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
    tabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
    tabContent.Parent = self.baseFrame

    local cornerTabContent = Instance.new("UICorner")
    cornerTabContent.CornerRadius = UDim.new(0.1, 0)
    cornerTabContent.Parent = tabContent

    local gridLayout = Instance.new("UIGridLayout")
    gridLayout.CellPadding = UDim2.new(0.02, 0, 0.02, 0)
    gridLayout.CellSize = UDim2.new(1 / params.Colunas, -10, 0.1, 0)
    gridLayout.FillDirection = Enum.FillDirection.Horizontal
    gridLayout.FillDirectionMaxCells = params.Colunas or 2
    gridLayout.SortOrder = Enum.SortOrder.LayoutOrder
    gridLayout.Parent = tabContent

    local tabButton = Instance.new("TextButton")
    tabButton.Text = params.Nome or "Aba"
    tabButton.Size = UDim2.new(0, 100, 1, 0)
    tabButton.BackgroundColor3 = params.Cor or Color3.fromRGB(70, 70, 70)
    tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    tabButton.Font = Enum.Font.GothamBold
    tabButton.TextSize = 16

    local cornerTabButton = Instance.new("UICorner")
    cornerTabButton.CornerRadius = UDim.new(0.1, 0)
    cornerTabButton.Parent = tabButton

    tabButton.MouseButton1Click:Connect(function()
        for _, content in pairs(self.tabs) do
            content.Visible = false
        end
        tabContent.Visible = true
    end)

    tabButton.Parent = self.tabScrollFrame
    self.tabScrollFrame.CanvasSize = UDim2.new(0, self.tabScrollFrame.UIListLayout.AbsoluteContentSize.X, 0, 0)
    table.insert(self.tabs, tabContent)

    if params.Default then
        tabContent.Visible = true
    end

    return tabContent
end

function RNOX:AddButton(parent, params)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0.2, 0, 0.15, 0)
    button.Text = params.Nome or "Botão"
    button.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Font = Enum.Font.Gotham
    button.TextSize = 18
    button.TextWrapped = true
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = button
    button.MouseButton1Click:Connect(function()
        local success, err = pcall(function()
            loadstring(params.Acao)()
        end)
        if not success then
            warn("Erro ao executar a função do botão: " .. err)
        end
    end)
    button.Parent = parent
end

function RNOX:AddToggle(parent, params)
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0.2, 0, 0.15, 0)
    toggleButton.Text = params.Nome or "Toggle"
    toggleButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.TextSize = 16
    toggleButton.TextWrapped = true
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = toggleButton
    local icon = Instance.new("ImageButton")
    icon.Size = UDim2.new(0.1, 0, 0.8, 0)
    icon.Position = UDim2.new(0.88, 0, 0.1, 0)
    icon.BackgroundTransparency = 1
    icon.Image = "rbxassetid://14293471713"
    icon.ImageColor3 = Color3.fromRGB(255, 0, 0)
    icon.Parent = toggleButton
    local isActive = false
    icon.MouseButton1Click:Connect(function()
        isActive = not isActive
        toggleButton.BackgroundColor3 = isActive and Color3.fromRGB(0, 0, 0) or Color3.fromRGB(0, 0, 0)
        icon.ImageColor3 = isActive and Color3.fromRGB(0, 200, 0) or Color3.fromRGB(200, 0, 0)
        if params.Acao then
            local success, err = pcall(function()
                params.Acao(isActive)
            end)
            if not success then
                warn("Erro no toggle: " .. err)
            end
        end
    end)
    toggleButton.Parent = parent
end

function RNOX:AddSlider(parent, params)
    local minValue, maxValue = params.Range:match("(%d+)/(%d+)")
    minValue = tonumber(minValue) or 16
    maxValue = tonumber(maxValue) or 1000
    local initialValue = minValue
    local sliderColor = params.Color and {params.Color:match("(%d+),(%d+),(%d+)")} or {255, 255, 255}

    local sliderFrame = Instance.new("Frame")
    sliderFrame.Size = UDim2.new(0.8, 0, 0.1, 0)
    sliderFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    sliderFrame.BorderSizePixel = 0
    sliderFrame.Parent = parent

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = sliderFrame

    local track = Instance.new("Frame")
    track.Size = UDim2.new((initialValue - minValue) / (maxValue - minValue), 0, 0.4, 0)
    track.Position = UDim2.new(0, 0, 0.5, 0)
    track.AnchorPoint = Vector2.new(0, 0.5)
    track.BackgroundColor3 = Color3.fromRGB(sliderColor[1], sliderColor[2], sliderColor[3])
    track.BorderSizePixel = 0
    track.Parent = sliderFrame

    local trackCorner = Instance.new("UICorner")
    trackCorner.CornerRadius = UDim.new(0, 5)
    trackCorner.Parent = track

    local handle = Instance.new("Frame")
    handle.Size = UDim2.new(0.05, 0, track.Size.Y.Scale, 0)
    handle.Position = UDim2.new((initialValue - minValue) / (maxValue - minValue), 0, 0.5, 0)
    handle.AnchorPoint = Vector2.new(0.5, 0.5)
    handle.BackgroundColor3 = Color3.fromRGB(sliderColor[1], sliderColor[2], sliderColor[3])
    handle.BorderSizePixel = 0
    handle.Parent = sliderFrame

    local handleCorner = Instance.new("UICorner")
    handleCorner.CornerRadius = UDim.new(1, 0)
    handleCorner.Parent = handle

    local valueTextBox = Instance.new("TextBox")
    valueTextBox.Size = UDim2.new(0.2, 0, 0.4, 0)
    valueTextBox.AnchorPoint = Vector2.new(0.5, 0.5)
    valueTextBox.Position = UDim2.new(0.5, 0, 0.5, 0)
    valueTextBox.BackgroundTransparency = 1
    valueTextBox.Text = tostring(initialValue)
    valueTextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    valueTextBox.Font = Enum.Font.GothamBold
    valueTextBox.TextSize = 14
    valueTextBox.TextXAlignment = Enum.TextXAlignment.Center
    valueTextBox.TextYAlignment = Enum.TextYAlignment.Center
    valueTextBox.ClearTextOnFocus = false
    valueTextBox.Parent = sliderFrame

    local dragging = false

    local function updateSliderBar(value)
        local relativeWidth = math.clamp((value - minValue) / (maxValue - minValue), 0, 1)
        track.Size = UDim2.new(relativeWidth, 0, 0.4, 0)
        handle.Position = UDim2.new(relativeWidth, 0, 0.5, 0)
        valueTextBox.Text = tostring(value)
        if params.SliderFunction then
            local success, err = pcall(function()
                params.SliderFunction(value)
            end)
            if not success then
                warn("Erro ao executar a função do slider: " .. err)
            end
        end
    end

    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)

    handle.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local relativePosition = math.clamp((input.Position.X - sliderFrame.AbsolutePosition.X) / sliderFrame.AbsoluteSize.X, 0, 1)
            local currentValue = math.floor(minValue + (maxValue - minValue) * relativePosition)
            updateSliderBar(currentValue)
        end
    end)

    valueTextBox.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            local enteredValue = tonumber(valueTextBox.Text)
            if enteredValue then
                enteredValue = math.clamp(enteredValue, minValue, maxValue)
                updateSliderBar(enteredValue)
            else
                updateSliderBar(minValue)
            end
        end
    end)

    updateSliderBar(initialValue)
end

return RNOX
