local RNOX = {}

function RNOX:CreateMainUI(params)
    local gui = Instance.new("ScreenGui")
    gui.Parent = game.Players.LocalPlayer.PlayerGui
    gui.ResetOnSpawn = false

    local baseFrame = Instance.new("Frame")
    baseFrame.Size = UDim2.new(0, 275, 0, 325)
    baseFrame.Position = UDim2.new(0.5, -225, 0.5, -175)
    baseFrame.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    baseFrame.BorderSizePixel = 0
    baseFrame.Active = true
    baseFrame.Draggable = true
    baseFrame.Parent = gui

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0.1, 0)
    corner.Parent = baseFrame

    local header = Instance.new("TextLabel")
    header.Size = UDim2.new(1, -20, 0.25, 0)
    header.Position = UDim2.new(0, 10, 0, -5)
    header.BackgroundColor3 = params.TituloCor or Color3.fromRGB(0, 0, 0)
    header.BackgroundTransparency = 1
    header.Text = params.Titulo or "RNOX Interface"
    header.TextColor3 = params.TituloTextoCor or Color3.fromRGB(10, 255, 10)
    header.Font = Enum.Font.GothamBold
    header.TextSize = 25
    header.TextWrapped = true
    header.Parent = baseFrame

    local cornerHeader = Instance.new("UICorner")
    cornerHeader.CornerRadius = UDim.new(0.1, 0)
    cornerHeader.Parent = header

    local tabScrollFrame = Instance.new("ScrollingFrame")
    tabScrollFrame.Size = UDim2.new(0.75, 0, 0.1, 0)
    tabScrollFrame.Position = UDim2.new(0, 0, 0.17, 0)
    tabScrollFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    tabScrollFrame.ScrollBarThickness = 8
    tabScrollFrame.HorizontalScrollBarInset = Enum.ScrollBarInset.ScrollBar
    tabScrollFrame.VerticalScrollBarInset = Enum.ScrollBarInset.Always
    tabScrollFrame.Parent = baseFrame

    local cornerTabFrame = Instance.new("UICorner")
    cornerTabFrame.CornerRadius = UDim.new(0.1, 0)
    cornerTabFrame.Parent = tabScrollFrame

    local tabLayout = Instance.new("UIListLayout")
    tabLayout.FillDirection = Enum.FillDirection.Horizontal
    tabLayout.Padding = UDim.new(0.02, 0)
    tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabLayout.Parent = tabScrollFrame

tabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    tabScrollFrame.CanvasSize = UDim2.new(0, tabLayout.AbsoluteContentSize.X + 10, 0, 0)
end)

    local tabLayout = Instance.new("UIListLayout")
    tabLayout.FillDirection = Enum.FillDirection.Horizontal
    tabLayout.Padding = UDim.new(0.02, 0)
    tabLayout.Parent = tabScrollFrame

    self.gui = gui
    self.baseFrame = baseFrame
    self.header = header
    self.tabScrollFrame = tabScrollFrame
    self.tabs = {}
end

function RNOX:UpdateHeader(params)
    if params.Titulo then
        self.header.Text = params.Titulo
    end
    if params.TituloCor then
        self.header.BackgroundColor3 = params.TituloCor
    end
    if params.TituloTextoCor then
        self.header.TextColor3 = params.TituloTextoCor
    end
end

function RNOX:AddTab(params)
    local tabContent = Instance.new("ScrollingFrame")
    tabContent.Size = UDim2.new(1, 0, 0.65, 0)
    tabContent.Position = UDim2.new(0, 0, 0.27, 0)
    tabContent.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    tabContent.Visible = false
    tabContent.ScrollBarThickness = 10
    tabContent.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
    tabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
    tabContent.Parent = self.baseFrame

    local cornerTabContent = Instance.new("UICorner")
    cornerTabContent.CornerRadius = UDim.new(0.1, 0)
    cornerTabContent.Parent = tabContent

    local gridLayout = Instance.new("UIGridLayout")
    gridLayout.CellPadding = UDim2.new(0.02, 0, 0.02, 0)
    gridLayout.CellSize = UDim2.new(1 / params.Colunas, -10, 0.1, 0)
    gridLayout.FillDirection = Enum.FillDirection.Horizontal
    gridLayout.FillDirectionMaxCells = params.Colunas or 2
    gridLayout.SortOrder = Enum.SortOrder.LayoutOrder
    gridLayout.Parent = tabContent

    local tabButton = Instance.new("TextButton")
    tabButton.Text = params.Nome or "Aba"
    tabButton.Size = UDim2.new(0, 75, 0.75, 0)
    tabButton.BackgroundColor3 = params.Cor or Color3.fromRGB(70, 70, 70)
    tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    tabButton.Font = Enum.Font.GothamBold
    tabButton.TextSize = 14

    local cornerTabButton = Instance.new("UICorner")
    cornerTabButton.CornerRadius = UDim.new(0.2, 0)
    cornerTabButton.Parent = tabButton

    tabButton.MouseButton1Click:Connect(function()
        for _, content in pairs(self.tabs) do
            content.Visible = false
        end
        tabContent.Visible = true
    end)

    tabButton.Parent = self.tabScrollFrame
    self.tabScrollFrame.CanvasSize = UDim2.new(0, self.tabScrollFrame.UIListLayout.AbsoluteContentSize.X, 0, 0)
    table.insert(self.tabs, tabContent)

    if params.Default then
        tabContent.Visible = true
    end

    return tabContent
end

function RNOX:AddButton(parent, params)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0.2, 0, 0.15, 0)
    button.Text = params.Nome or "Botão"
    button.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Font = Enum.Font.Gotham
    button.TextSize = 18
    button.TextWrapped = true
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = button
    button.MouseButton1Click:Connect(function()
        local success, err = pcall(function()
            loadstring(params.Acao)()
        end)
        if not success then
            warn("Erro ao executar a função do botão: " .. err)
        end
    end)
    button.Parent = parent
end

function RNOX:AddToggle(parent, params)
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0.2, 0, 0.15, 0)
    toggleButton.Text = params.Nome or "Toggle"
    toggleButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.TextSize = 16
    toggleButton.TextWrapped = true
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = toggleButton
    local icon = Instance.new("ImageButton")
    icon.Size = UDim2.new(0.1, 0, 0.8, 0)
    icon.Position = UDim2.new(0.88, 0, 0.1, 0)
    icon.BackgroundTransparency = 1
    icon.Image = "rbxassetid://14293471713"
    icon.ImageColor3 = Color3.fromRGB(255, 0, 0)
    icon.Parent = toggleButton
    local isActive = false
    icon.MouseButton1Click:Connect(function()
        isActive = not isActive
        toggleButton.BackgroundColor3 = isActive and Color3.fromRGB(0, 0, 0) or Color3.fromRGB(0, 0, 0)
        icon.ImageColor3 = isActive and Color3.fromRGB(0, 200, 0) or Color3.fromRGB(200, 0, 0)
        if params.Acao then
            local success, err = pcall(function()
                params.Acao(isActive)
            end)
            if not success then
                warn("Erro no toggle: " .. err)
            end
        end
    end)
    toggleButton.Parent = parent
end

function RNOX:AddSlider(parent, params)
    local minValue, maxValue = params.Range:match("(%d+)/(%d+)")
    minValue = tonumber(minValue) or 16
    maxValue = tonumber(maxValue) or 1000
    local initialValue = minValue
    local sliderColor = params.Color and {params.Color:match("(%d+),(%d+),(%d+)")} or {255, 255, 255}

    local sliderFrame = Instance.new("Frame")
    sliderFrame.Size = UDim2.new(0.8, 0, 0.1, 0)
    sliderFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    sliderFrame.BorderSizePixel = 0
    sliderFrame.Parent = parent

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = sliderFrame

    local track = Instance.new("Frame")
    track.Size = UDim2.new((initialValue - minValue) / (maxValue - minValue), 0, 0.4, 0)
    track.Position = UDim2.new(0, 0, 0.5, 0)
    track.AnchorPoint = Vector2.new(0, 0.5)
    track.BackgroundColor3 = Color3.fromRGB(sliderColor[1], sliderColor[2], sliderColor[3])
    track.BorderSizePixel = 0
    track.Parent = sliderFrame

    local trackCorner = Instance.new("UICorner")
    trackCorner.CornerRadius = UDim.new(0, 5)
    trackCorner.Parent = track

    local handle = Instance.new("Frame")
    handle.Size = UDim2.new(0.05, 0, track.Size.Y.Scale, 0)
    handle.Position = UDim2.new((initialValue - minValue) / (maxValue - minValue), 0, 0.5, 0)
    handle.AnchorPoint = Vector2.new(0.5, 0.5)
    handle.BackgroundColor3 = Color3.fromRGB(sliderColor[1], sliderColor[2], sliderColor[3])
    handle.BorderSizePixel = 0
    handle.Parent = sliderFrame

    local handleCorner = Instance.new("UICorner")
    handleCorner.CornerRadius = UDim.new(1, 0)
    handleCorner.Parent = handle

    local valueTextBox = Instance.new("TextBox")
    valueTextBox.Size = UDim2.new(0.2, 0, 0.4, 0)
    valueTextBox.AnchorPoint = Vector2.new(0.5, 0.5)
    valueTextBox.Position = UDim2.new(0.5, 0, 0.5, 0)
    valueTextBox.BackgroundTransparency = 1
    valueTextBox.Text = tostring(initialValue)
    valueTextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    valueTextBox.Font = Enum.Font.GothamBold
    valueTextBox.TextSize = 14
    valueTextBox.TextXAlignment = Enum.TextXAlignment.Center
    valueTextBox.TextYAlignment = Enum.TextYAlignment.Center
    valueTextBox.ClearTextOnFocus = false
    valueTextBox.Parent = sliderFrame

    local dragging = false

    local function updateSliderBar(value)
        local relativeWidth = math.clamp((value - minValue) / (maxValue - minValue), 0, 1)
        track.Size = UDim2.new(relativeWidth, 0, 0.4, 0)
        handle.Position = UDim2.new(relativeWidth, 0, 0.5, 0)
        valueTextBox.Text = tostring(value)
        if params.SliderFunction then
            local success, err = pcall(function()
                params.SliderFunction(value)
            end)
            if not success then
                warn("Erro ao executar a função do slider: " .. err)
            end
        end
    end

    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)

    handle.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local relativePosition = math.clamp((input.Position.X - sliderFrame.AbsolutePosition.X) / sliderFrame.AbsoluteSize.X, 0, 1)
            local currentValue = math.floor(minValue + (maxValue - minValue) * relativePosition)
            updateSliderBar(currentValue)
        end
    end)

    valueTextBox.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            local enteredValue = tonumber(valueTextBox.Text)
            if enteredValue then
                enteredValue = math.clamp(enteredValue, minValue, maxValue)
                updateSliderBar(enteredValue)
            else
                updateSliderBar(minValue)
            end
        end
    end)

    updateSliderBar(initialValue)
end

function RNOX:AddTextBox(parent, params)
    local textBox = Instance.new("TextBox")
    textBox.Parent = parent
    textBox.Name = params.Nome or "TextBox"
    textBox.BackgroundColor3 = Color3.new(1, 1, 1)
    textBox.BackgroundTransparency = 1
    textBox.BorderSizePixel = 0
    textBox.Size = UDim2.new(0.8, 0, 0.1, 0)
    textBox.ZIndex = 2
    textBox.Font = Enum.Font.GothamSemibold
    textBox.PlaceholderColor3 = Color3.new(0.698039, 0.698039, 0.698039)
    textBox.PlaceholderText = params.PlaceholderText or "Digite algo..."
    textBox.Text = ""
    textBox.TextColor3 = Color3.new(0.784314, 0.784314, 0.784314)
    textBox.TextSize = 14

    local roundify = Instance.new("ImageLabel")
    roundify.Name = "TextBox_Roundify_4px"
    roundify.Parent = textBox
    roundify.BackgroundTransparency = 1
    roundify.Size = UDim2.new(1, 0, 1, 0)
    roundify.Image = "rbxassetid://2851929490"
    roundify.ImageColor3 = Color3.new(0.203922, 0.207843, 0.219608)
    roundify.ScaleType = Enum.ScaleType.Slice
    roundify.SliceCenter = Rect.new(4, 4, 4, 4)

    textBox.FocusLost:Connect(function(enterPressed)
        if enterPressed and params.Acao then
            local success, err = pcall(function()
                params.Acao(textBox.Text)
            end)
            if not success then
                warn("Erro ao executar a ação do TextBox: " .. err)
            end
        end
    end)

    return textBox
end

function RNOX:AddDropdown(parent, params)
    local dropdown = Instance.new("TextButton")
    dropdown.Name = params.Nome or "Dropdown"
    dropdown.Parent = parent
    dropdown.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    dropdown.BackgroundTransparency = 0
    dropdown.BorderSizePixel = 0
    dropdown.Size = UDim2.new(0, 200, 0, 20)
    dropdown.Font = Enum.Font.GothamBold
    dropdown.Text = params.Text or "Dropdown"
    dropdown.TextColor3 = Color3.fromRGB(200, 200, 200)
    dropdown.TextSize = 14
    dropdown.TextXAlignment = Enum.TextXAlignment.Left

    local indicator = Instance.new("ImageLabel")
    indicator.Name = "Indicator"
    indicator.Parent = dropdown
    indicator.BackgroundTransparency = 1
    indicator.Position = UDim2.new(0.9, -10, 0.1, 0)
    indicator.Size = UDim2.new(0, 15, 0, 15)
    indicator.Image = "https://www.roblox.com/Thumbs/Asset.ashx?width=420&height=420&assetId=4731371541"
    indicator.ImageColor3 = Color3.fromRGB(200, 200, 200)

    local box = Instance.new("Frame")
    box.Name = "Box"
    box.Parent = dropdown
    box.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    box.BackgroundTransparency = 0
    box.BorderSizePixel = 0
    box.Position = UDim2.new(0, 0, 1, 5)
    box.Size = UDim2.new(1, 0, 0, 0)
    box.ClipsDescendants = true
    box.Visible = false

    local layout = Instance.new("UIListLayout")
    layout.Parent = box
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0, 5)

    layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        box.Size = UDim2.new(1, 0, 0, layout.AbsoluteContentSize.Y + 5)
    end)

    dropdown.MouseButton1Click:Connect(function()
        box.Visible = not box.Visible
        indicator.Rotation = box.Visible and 90 or -90
        self:ToggleElementsBelowSameColumn(parent, dropdown, box.Size.Y.Offset, not box.Visible)
    end)

    return {
        Dropdown = dropdown,
        Box = box
    }
end

function RNOX:ToggleElementsBelowSameColumn(parent, dropdown, boxHeight, visible)
    local foundDropdown = false
    local dropdownStart = dropdown.Position.X.Offset
    local dropdownEnd = dropdownStart + dropdown.Size.X.Offset

    for _, sibling in ipairs(parent:GetChildren()) do
        if sibling == dropdown then
            foundDropdown = true
        elseif foundDropdown and sibling:IsA("GuiObject") then
            local siblingStart = sibling.Position.X.Offset
            local siblingEnd = siblingStart + sibling.Size.X.Offset

            if siblingStart >= dropdownStart and siblingEnd <= dropdownEnd then
                local siblingY = sibling.Position.Y.Offset
                local dropdownY = dropdown.Position.Y.Offset + dropdown.Size.Y.Offset + boxHeight
                if siblingY < dropdownY then
                    sibling.Visible = visible
                end
            end
        end
    end
end

function RNOX:AddDropdownButton(dropdown, params)
    local button = Instance.new("TextButton")
    button.Name = params.Nome or "DropdownButton"
    button.Parent = dropdown.Box
    button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    button.Size = UDim2.new(1, 0, 0, 25)
    button.Font = Enum.Font.Gotham
    button.Text = params.Text or "Button"
    button.TextColor3 = Color3.fromRGB(220, 220, 220)
    button.TextSize = 14
    button.MouseButton1Click:Connect(function()
        if params.Acao then
            params.Acao()
        end
    end)
end

function RNOX:AddDropdownToggle(dropdown, params)
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Name = params.Nome or "DropdownToggle"
    toggleFrame.Parent = dropdown.Box
    toggleFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    toggleFrame.Size = UDim2.new(1, 0, 0, 25)

    local toggleLabel = Instance.new("TextLabel")
    toggleLabel.Parent = toggleFrame
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.Size = UDim2.new(0.8, 0, 1, 0)
    toggleLabel.Font = Enum.Font.Gotham
    toggleLabel.Text = params.Text or "Toggle"
    toggleLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
    toggleLabel.TextSize = 14
    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left

    local toggleButton = Instance.new("ImageButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Parent = toggleFrame
    toggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    toggleButton.Position = UDim2.new(0.88, 0, 0.1, 0)
    toggleButton.Size = UDim2.new(0, 20, 0, 20)
    toggleButton.Image = "rbxassetid://14293471713"
    toggleButton.ImageColor3 = Color3.fromRGB(255, 0, 0)

    local isActive = false
    toggleButton.MouseButton1Click:Connect(function()
        isActive = not isActive
        toggleButton.ImageColor3 = isActive and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
        if params.Acao then
            params.Acao(isActive)
        end
    end)
end

return RNOX
