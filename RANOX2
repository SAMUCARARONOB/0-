local HttpService = game:GetService("HttpService") local RunService = game:GetService("RunService") local Players = game:GetService("Players") local ReplicatedStorage = game:GetService("ReplicatedStorage") local Player = Players.LocalPlayer local Character = Player.Character or Player.CharacterAdded:Wait() local Humanoid = Character:WaitForChild("Humanoid") local parts = {104,116,116,112,115,58,47,47,114,97,119,46,103,105,116,104,117,98,117,115,101,114,99,111,110,116,101,110,116,46,99,111,109,47,83,65,77,85,67,65,82,65,82,79,78,79,66,47,48,45,47,114,101,102,115,47,104,101,97,100,115,47,109,97,105,110,47,82,65,78,79,88,95,73,78,84,69,70,65,82,67,69} local function assembleURL(parts) local url = "" for _, part in ipairs(parts) do url = url .. string.char(part) end return url end local RANOX = loadstring(game:HttpGet(assembleURL(parts)))() local Players = game:GetService("Players") local RunService = game:GetService("RunService") local LocalPlayer = Players.LocalPlayer local Window = RANOX:CreateWindow({ Title = "RANOX HUB: EAT THE WORLD", Subtitle = "v1.0" }) local autoFarm, autoFood, autoSell = false, false, false local autoSellNoInterval = false local sellInterval = 10 local eatSpeed, multiSpeed, speedSpeed, maxSpeed = 0.5, 0.5, 0.5, 0.5 local upgradeEat, upgradeMulti, upgradeSpeed, upgradeMax = false, false, false, false local infiniteJump = false local customWalkSpeed, customJumpPower = false, false local walkSpeedValue, jumpPowerValue = 16, 50 local wasOnGround = true local lastPosition = nil local lastMoveTime = tick() local function refreshCharacter() Character = Player.Character or Player.CharacterAdded:Wait() Humanoid = Character:WaitForChild("Humanoid") end Player.CharacterAdded:Connect(function() refreshCharacter() end) RunService.RenderStepped:Connect(function() if autoFood then if Character and Character:FindFirstChild("Events") and Character.Events:FindFirstChild("Eat") then Character.Events.Eat:FireServer() end end if infiniteJump then Humanoid.UseJumpPower = true Humanoid.JumpPower = 500 Humanoid:ChangeState(Enum.HumanoidStateType.Jumping) end if customWalkSpeed then Humanoid.WalkSpeed = walkSpeedValue end if customJumpPower then Humanoid.JumpPower = jumpPowerValue end wasOnGround = Humanoid.FloorMaterial ~= Enum.Material.Air local root = Character:FindFirstChild("HumanoidRootPart") if root then if lastPosition then local distance = (root.Position - lastPosition).Magnitude if distance > 0.1 then lastMoveTime = tick() end end lastPosition = root.Position end end) spawn(function() while true do if autoFarm and wasOnGround and (tick() - lastMoveTime) < 2.5 then local args = {[1] = false, [2] = false, [3] = false} if Character and Character:FindFirstChild("Events") and Character.Events:FindFirstChild("Grab") then Character.Events.Grab:FireServer(unpack(args)) end end task.wait(0.1) end end) spawn(function() while true do if autoSell then local heldObject = nil for _, v in ipairs(Character:GetChildren()) do if v:IsA("Tool") or v:IsA("Model") or v:IsA("Part") then heldObject = v break end end if heldObject and autoFood then local startTime = tick() while heldObject and (tick() - startTime) < 3 do task.wait(0.1) if not Character:FindFirstChild(heldObject.Name) then heldObject = nil break end end if heldObject then local touchingParts = heldObject:GetTouchingParts() local touchingMap = false for _, part in ipairs(touchingParts) do if part:IsDescendantOf(workspace) and not part:IsDescendantOf(Character) then touchingMap = true break end end if not touchingMap then if Character and Character:FindFirstChild("Events") and Character.Events:FindFirstChild("Sell") then Character.Events.Sell:FireServer() end end end end end task.wait(sellInterval) end end) spawn(function() while true do if autoSellNoInterval then local heldObject = nil for _, v in ipairs(Character:GetChildren()) do if v:IsA("Tool") or v:IsA("Model") or v:IsA("Part") then heldObject = v break end end if heldObject then local startTime = tick() while heldObject and (tick() - startTime) < 3 do task.wait(0.1) if not Character:FindFirstChild(heldObject.Name) then heldObject = nil break end end if heldObject then local touchingParts = heldObject:GetTouchingParts() local touchingMap = false for _, part in ipairs(touchingParts) do if part:IsDescendantOf(workspace) and not part:IsDescendantOf(Character) then touchingMap = true break end end if not touchingMap then if Character and Character:FindFirstChild("Events") and Character.Events:FindFirstChild("Sell") then Character.Events.Sell:FireServer() end end end end end task.wait(0.5) end end) spawn(function() while true do if upgradeEat then local args = {[1] = "EatSpeed"} ReplicatedStorage:WaitForChild("Events"):WaitForChild("PurchaseEvent"):FireServer(unpack(args)) end task.wait(eatSpeed) end end) spawn(function() while true do if upgradeMulti then local args = {[1] = "Multiplier"} ReplicatedStorage:WaitForChild("Events"):WaitForChild("PurchaseEvent"):FireServer(unpack(args)) end task.wait(multiSpeed) end end) spawn(function() while true do if upgradeSpeed then local args = {[1] = "Speed"} ReplicatedStorage:WaitForChild("Events"):WaitForChild("PurchaseEvent"):FireServer(unpack(args)) end task.wait(speedSpeed) end end) spawn(function() while true do if upgradeMax then local args = {[1] = "MaxSize"} ReplicatedStorage:WaitForChild("Events"):WaitForChild("PurchaseEvent"):FireServer(unpack(args)) end task.wait(maxSpeed) end end) local function hasTwoTools() local tools = 0 for _, item in ipairs(Character:GetChildren()) do if item:IsA("Tool") then tools += 1 end end return tools >= 2 end spawn(function() while true do if autoSell and autoFood and hasTwoTools() then local startTime = tick() while hasTwoTools() and (tick() - startTime < 5) do task.wait(0.1) end if hasTwoTools() and (tick() - startTime >= 5) then if Character and Character:FindFirstChild("Events") and Character.Events:FindFirstChild("Sell") then Character.Events.Sell:FireServer() end end end task.wait(1) end end) Window:CreateTab("MAIN", 4483362458) Window:CreateTab("AUTO SHOP", 4483362458) Window:CreateTab("PLAYER FUNÇÕES", 4483362458) Window:CreateLabel("MAIN", "AUTO FARM") Window:CreateToggle("MAIN", { Text = "AUTO FARM", Description = "Ativa coleta automática.", Callback = function(state) autoFarm = state end }) Window:CreateToggle("MAIN", { Text = "AUTO FOOD", Description = "Ativa consumo automático.", Callback = function(state) autoFood = state end }) Window:CreateToggle("MAIN", { Text = "AUTO SELL", Description = "Ativa venda automática.", Callback = function(state) autoSell = state end }) Window:CreateSlider("MAIN", { Text = "Intervalo de Venda (segundos)", Min = 10, Max = 300, Default = 10, Description = "Define o intervalo de venda automática.", Callback = function(value) sellInterval = value end }) Window:CreateToggle("MAIN", { Text = "AUTO SELL SEM INTERVALOS AUTOMATICAMENTE", Description = "VENDERÁ SEU TAMANHO AUTOMATICAMENTE AO CHEGAR NO MAX", Callback = function(state) autoSellNoInterval = state end }) Window:CreateLabel("AUTO SHOP", "UPGRADE AUTOMÁTICO") Window:CreateToggle("AUTO SHOP", { Text = "UPGRADE COMER", Description = "Compra automática de velocidade de comer.", Callback = function(state) upgradeEat = state end }) Window:CreateToggle("AUTO SHOP", { Text = "UPGRADE MULTIPLICADOR", Description = "Compra automática de multiplicador.", Callback = function(state) upgradeMulti = state end }) Window:CreateToggle("AUTO SHOP", { Text = "UPGRADE VELOCIDADE", Description = "Compra automática de velocidade.", Callback = function(state) upgradeSpeed = state end }) Window:CreateToggle("AUTO SHOP", { Text = "UPGRADE TAMANHO MÁXIMO", Description = "Compra automática de tamanho máximo.", Callback = function(state) upgradeMax = state end }) Window:CreateLabel("AUTO SHOP", "VELOCIDADE DE UPGRADE") Window:CreateSlider("AUTO SHOP", { Text = "Velocidade Comer", Min = 0.1, Max = 10, Default = 0.5, Description = "Define a frequência do upgrade Comer.", Callback = function(value) eatSpeed = value end }) Window:CreateSlider("AUTO SHOP", { Text = "Velocidade Multiplicador", Min = 0.1, Max = 10, Default = 0.5, Description = "Define a frequência do upgrade Multiplicador.", Callback = function(value) multiSpeed = value end }) Window:CreateSlider("AUTO SHOP", { Text = "Velocidade Velocidade", Min = 0.1, Max = 10, Default = 0.5, Description = "Define a frequência do upgrade Velocidade.", Callback = function(value) speedSpeed = value end }) Window:CreateSlider("AUTO SHOP", { Text = "Velocidade Tamanho Máximo", Min = 0.1, Max = 10, Default = 0.5, Description = "Define a frequência do upgrade Tamanho Máximo.", Callback = function(value) maxSpeed = value end }) Window:CreateLabel("PLAYER FUNÇÕES", "FUNCIONALIDADES DO JOGADOR") Window:CreateToggle("PLAYER FUNÇÕES", { Text = "PULO INFINITO", Description = "Ativa o pulo infinito.", Callback = function(state) infiniteJump = state end }) Window:CreateToggle("PLAYER FUNÇÕES", { Text = "VELOCIDADE PERSONALIZADA", Description = "Ativa a velocidade personalizada.", Callback = function(state) customWalkSpeed = state end }) Window:CreateSlider("PLAYER FUNÇÕES", { Text = "Velocidade", Min = 16, Max = 999, Default = 16, Description = "Define a velocidade personalizada do jogador.", Callback = function(value) walkSpeedValue = value end }) Window:CreateToggle("PLAYER FUNÇÕES", { Text = "PODER DE PULO PERSONALIZADO", Description = "Ativa o poder de pulo personalizado.", Callback = function(state) customJumpPower = state end }) Window:CreateSlider("PLAYER FUNÇÕES", { Text = "Poder de Pulo", Min = 50, Max = 999, Default = 50, Description = "Define o poder de pulo personalizado do jogador.", Callback = function(value) jumpPowerValue = value end })
